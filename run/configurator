#!/usr/bin/env ruby
description = "Configure Bob"

if ARGV.length == 2 and ARGV[0] == 'describe'
  basename = File.basename(__FILE__).to_s.ljust(ARGV[1].to_i)
  print "  #{basename} - #{description}"
  exit 0
end

def available_capybara_drivers
  drivers = ['selenium']
  drivers << 'webkit' if Gem::Specification.find_all_by_name('capybara-webkit').count > 0
  drivers << 'poltergeist' if  Gem::Specification.find_all_by_name('capybara/poltergeist').count > 0
  drivers.join(', ')
end

require 'rubygems'
require 'yaml'
require 'fileutils'
require 'optparse'
require File.expand_path('../../features/support/cloud_configuration.rb', __FILE__)

include CloudConfiguration

@options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: run/#{File.basename(__FILE__)} [options]"

  opts.on("-f", "--force", "Allows you to overwrite existing settings in config.yml") do |v|
    @options[:force] = v
  end

  opts.on("-h", "--host HOST", "Web Client URL of the mCloud instance you want to verify") do |v|
    @options[WEB_CLIENT_HOST] = v
  end

  opts.on("-o", "--openstack_api_url URL", "(optional) URL of the OpenStack service used by the mCloud instance you want to verify") do |v|
    @options[OPENSTACK_AUTH_URL] = v
  end

  opts.on("-u", "--username USERNAME", "Cloud admin username") do |v|
    @options[OPENSTACK_USERNAME] = v
  end

  opts.on("-p", "--password PASSWORD", "Cloud admin password") do |v|
    @options[OPENSTACK_API_KEY] = v
  end

  opts.on("-t", "--tenant TENANT", "Cloud tenant") do |v|
    @options[OPENSTACK_TENANT] = v
  end

  opts.on("-d", "--driver DRIVER", "Cabybara drivers: #{ available_capybara_drivers }") do |v|
    @options[CAPYBARA_DRIVER] = v
  end

  opts.on("--[no-]tunnel", "Connect to servers via SSH tunnel") do |v|
    @options[TUNNEL] = v
  end

  opts.on("--server_username USERNAME", "(default: #{`whoami`.chomp}) SSH server username") do |v|
    @options[SERVER_USERNAME] = v
  end

end.parse!

# Remove old configuration file location
FileUtils.rm_rf( File.expand_path('../../configuration.rb', __FILE__) )

config_path = CloudConfiguration::PATH

if File.exists?(config_path)
  puts "Found configuration file at #{ config_path }"
  config_file = File.open(config_path, 'r+')
  @config = YAML.load_file(config_file)
else
  puts "Creating new configuration file at #{ config_path }"
end

@config = {} unless @config

def configure(hash, key, prompt, force = @options[:force])
  value = hash[key]
  if value.nil? || (value.respond_to?(:empty?) && value.empty?) || force
    print prompt
    if force
      if value == true
        print "[y] "
      elsif value == false
        print "[n] "
      elsif !value.nil?
        print "[#{value}] "
      end
    end
    hash[key] = STDIN.gets.to_s.chomp
    hash[key] = value if hash[key].empty?
  end
end

def cleanup_url(hash, key)
  url = hash[key]
  url = "http://#{url}" if url.match(/^http/).nil?
  hash[key] = url.gsub(/\/?$/, '')
end


openstack_options = @config[OPENSTACK_OPTIONS] ||= {}

@config[WEB_CLIENT_HOST] = @options[WEB_CLIENT_HOST] || @config[WEB_CLIENT_HOST]
configure @config, WEB_CLIENT_HOST, "Web Client URL of the mCloud instance you want to verify? "
cleanup_url(@config, WEB_CLIENT_HOST)

openstack_options[OPENSTACK_AUTH_URL] = @options[OPENSTACK_AUTH_URL] || openstack_options[OPENSTACK_AUTH_URL] || "#{ @config[WEB_CLIENT_HOST] }:35357/v2.0/tokens"
configure openstack_options, OPENSTACK_AUTH_URL, "openstack_auth_url for #{@config[WEB_CLIENT_HOST]}? "
cleanup_url(openstack_options, OPENSTACK_AUTH_URL)

openstack_options[OPENSTACK_USERNAME] = @options[OPENSTACK_USERNAME] || openstack_options[OPENSTACK_USERNAME]
configure openstack_options, OPENSTACK_USERNAME, "admin username for #{openstack_options[OPENSTACK_AUTH_URL]}? "

openstack_options[OPENSTACK_API_KEY] = @options[OPENSTACK_API_KEY] || openstack_options[OPENSTACK_API_KEY]
configure openstack_options, OPENSTACK_API_KEY , "password for #{openstack_options[OPENSTACK_USERNAME]}? "

openstack_options[OPENSTACK_TENANT] = @options[OPENSTACK_TENANT] || openstack_options[OPENSTACK_TENANT]
configure openstack_options, OPENSTACK_TENANT  , "tenant name for #{openstack_options[OPENSTACK_USERNAME]}? "

@config[CAPYBARA_DRIVER] = @options[CAPYBARA_DRIVER] || @config[CAPYBARA_DRIVER] || 'selenium'
configure @config, CAPYBARA_DRIVER  , "capybara driver? (#{ available_capybara_drivers })"

@config[FAILED_TENANT_LIMIT] = @options[FAILED_TENANT_LIMIT] || @config[FAILED_TENANT_LIMIT] || 10
configure @config, FAILED_TENANT_LIMIT, "max limit for failed projects? "

@config[TUNNEL] = case @config[TUNNEL] || @options[TUNNEL]
                  when true  then 'y'
                  when false then 'n'
                  end
configure @config, TUNNEL, "connect via tunnel? (Yn) "
@config[TUNNEL] = (@config[TUNNEL].downcase == 'y')

@config[SERVER_USERNAME] = @options[SERVER_USERNAME] || @config[SERVER_USERNAME]
if @config[TUNNEL]
  configure @config, SERVER_USERNAME, "ssh server username? "
  @config[SERVER_USERNAME] ||= `whoami`.chomp
  openstack_options[OPENSTACK_AUTH_URL] = "http://localhost:35357/v2.0/tokens"
else
  openstack_options[OPENSTACK_AUTH_URL] = @options[OPENSTACK_AUTH_URL] || openstack_options[OPENSTACK_AUTH_URL] || "#{ @config[WEB_CLIENT_HOST] }:35357/v2.0/tokens"
end

cleanup_options   = @config[CLEANUP_OPTIONS] ||= {}
cleanup_options.merge!(CLEANUP_EXEMPTIONS => { projects: ['admin', 'demo'],
                                               users:    ['admin', 'demo', 'nova', 'glance'],
                                               images:   ['64_Bit_Ubuntu_12.04'] })

puts "Writing #{config_path} with contents:"
puts @config.to_yaml
FileUtils.rm_rf(config_path)
config_file = File.open(config_path, File::WRONLY|File::CREAT|File::EXCL)
YAML.dump(@config, config_file)
