#!/usr/bin/env ruby
description = "Configure this copy of mcloud_features"

if ARGV.length == 2 and ARGV[0] == 'describe'
  basename = File.basename(__FILE__).to_s.ljust(ARGV[1].to_i)
  print "  #{basename} - #{description}"
  exit 0
elsif ARGV.length == 1 and ARGV[0] == '--help'
  puts "Examples:"
  puts "\trun/#{File.basename(__FILE__)}"
  puts "\trun/#{File.basename(__FILE__)}\ --force"
  puts "\nThe --force option allows you to overwrite existing settings in config.yml"
  exit 0
end

require 'rubygems'
require 'yaml'
require 'fileutils'
require File.expand_path('../../features/support/configuration.rb', __FILE__)

include CloudConfiguration

# Remove old configuration file location
FileUtils.rm_rf( File.expand_path('../../configuration.rb', __FILE__) )

@force = ARGV.include?('--force')

config_path = CloudConfiguration::PATH

if File.exists?(config_path)
  config_file = File.open(config_path, 'r+')
  @config = YAML.load_file(config_file)
end

@config = {} unless @config

def configure(hash, key, prompt, force = @force)
  value = hash[key]
  if value.nil? || value.empty? || force
    print prompt
    print "[#{value}] " if force && !value.nil?
    hash[key] = STDIN.gets.chomp
    hash[key] = value if hash[key].empty?
  end
end

def cleanup_url(hash, key)
  url = hash[key]
  url = "http://#{url}" if url.match(/^http/).nil?
  hash[key] = url.gsub(/\/?$/, '')
end

configure @config, WEB_CLIENT_HOST, "URL of the mCloud instance you want to verify? "
cleanup_url(@config, WEB_CLIENT_HOST)

openstack_options = @config[OPENSTACK_OPTIONS] ||= {}

openstack_options[OPENSTACK_AUTH_URL] ||= "#{@config[WEB_CLIENT_HOST]}:35357/v2.0/tokens"
configure openstack_options, OPENSTACK_AUTH_URL, "openstack_auth_url for #{@config[WEB_CLIENT_HOST]}? ", true
cleanup_url(openstack_options, OPENSTACK_AUTH_URL)

configure openstack_options, OPENSTACK_USERNAME, "cloud admin username for #{openstack_options[OPENSTACK_AUTH_URL]}? "
configure openstack_options, OPENSTACK_API_KEY , "password for #{openstack_options[OPENSTACK_USERNAME]}? "

openstack_options[OPENSTACK_TENANT] ||= 'admin'
configure openstack_options, OPENSTACK_TENANT  , "tenant name for #{openstack_options[OPENSTACK_USERNAME]}? "

puts "Writing #{config_path}"
FileUtils.rm_rf(config_path)
config_file = File.open(config_path, File::WRONLY|File::CREAT|File::EXCL)
YAML.dump(@config, config_file)